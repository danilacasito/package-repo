--Created with Packager by CrazedProgrammer
b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' function frombase64(data) data = string.gsub(data, '[^'..b..'=]', '') return (data:gsub('.', function(x) if (x == '=') then return '' end local r,f='',(b:find(x)-1) for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end return r; end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x) if (#x ~= 8) then return '' end local c=0 for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end return string.char(c) end)) end function lzw_decode(s) local str = { } for i=1,#s/2,1 do table.insert(str, s:byte(i * 2 - 1) * 256 + s:byte(i * 2)) end local dict_size = 256 local dict = {} for i = 0, dict_size-1 do dict[i] = string.char(i) end local w = string.char(str[1]) local result = w for i = 2, #str do local k = str[i] local entry = '' if dict[k] then entry = dict[k] elseif k == dict_size then entry = w .. w:sub(1,1) else return nil end result = result .. entry dict[dict_size] = w .. entry:sub(1,1) dict_size = dict_size + 1 w = entry end return result end d = 'ABEvdXNyL2Jpbi9wYWNrYWdlcgEADagALQAtAFAAYQBjAGsAYQBnAGUAcgAgAGIAeQAgAEMAcgBhAHoAZQBkAFAAcgBvAGcBDwBtAG0BCAAKAAoAYgA9ACcAQQBCAEMARABFAEYARwBIAEkASgBLAEwATQBOAE8AUABRAFIAUwBUAFUAVgBXAFgAWQBaAGEAYgBjAGQAZQBmAGcAaABpAGoAawBsAG0AbgBvAHAAcQByAHMAdAB1AHYAdwB4AHkAegAwADEAMgAzADQANQA2ADcAOAA5ACsALwAnAAoAZgB1AG4AYwB0AGkAbwBuACAAdABvAGIAYQBzAGUANgA0ACgAZABhAHQAYQApAAoAIAAgAHIAZQFOAHIBagAoAXQBdgBhADoAZwBzAHUAYgAoACcALgAnACwAIAFjAWUBZwFpACgAeAApACABegF7ACAAbABvAGMAYQBsAXwALAEeACcBjgB4ADoBCwB0AGUAKAF5AZoBkABvAQkAaQA9ADgALAAxACwALQAxACAAZABvAXwAPQByAC4ALgAoAGIAJQAyAF4AaQAtAcIBxAAoAcYAMQApAD4AMAAgAGEAbgBkACAAJwAxACcAIAGvAdQAMAAnAZcAZQHSAZkBewF9AX8BagByADsBmQHeAGQAKQG/ACcAMAHtAdsAKQGGAYgBigAnACUAZAH1AfUAPwH4AfoAZAA/AY4BkAFkAWYBaABuAZUBrAGaAGkAZgAgACgAIwB4ACAAPAAgADYBlwB0AGgB3gF8AX4AdQGAAdQB1wHoAeABmwGdAZ8AIABjAD0AMAIcAGYB2QGxAbUANgG5AbsCIQBjACsBlQA6AfIBygAsAGkAKQA9AR8B1gHQAdIAIAHJADYALQI0AdgBCQAwAd0B3wGtAeICFwFqAGICMAGJACgCLQG1Ak0CBQHoAeoBwAB7AhkBjwAnAjYB/gJXAdcAfQApAFsAIwF1AXcAJQAzACsAMQBdAXkCGwGRAgEBaQGbAHoAdwBfAd4AYwBvAT4AKAFNAHICBQGcAZ4BoAB3ACAAPQIZAZkCeAIfAX0BiABsAHQCfAAgAHsAfQJ/Ah4BoABkAGkBZgBfAHMAaQERAoYAMgFaAooCeQG5Ao4ChQJ9AogBmQIlAbAChgAwAY8CjQKPApEBEQG3AioCHAKkAHQAWwJ1AGkAbgBnAC4AYwBoAGEAcgHKACkAXQKGAGkB5wJEAh0CmABpAoYCqwKQApIAZQKeAdkCswK1ACACrwAgAnUBhgBtAXYCswGLAY0BlwG6AhwCgAJ6AGMChgJ7Ab8CIAK0AHICHAIHApkBZgBbAHcAYwK5AhIB3gIcAXsCewJ9AuUCHABlAGwBcALqAWsBOwBsAGUALgKvAXAAcgB0ACgCggB1AoQCowKaAuQCZgLzAqsC5ALmAroC8wLAAn0CwAArACAAMQLzAuwC3QK1Au8CvQIbAXsC4QB3AH4BHwHXAugAbgIcAXcAYgL2AvgAbgL6AvwC/gMAAuICrAB3AwQBewMXAr4CHwBzAoYAIgAiAsYBCQBrACwAdgLKAWoAcABhAGkBTAL9AGUCgwB0AtQAbwIcAzICfQBzAb8CrgKwArIC3gAoAs8CEgAuAGYBnAGvACgDOgAvAjsBWgApAgUBewNIAswDSwB0AHICrwKxAsgCtgM6ACUDWgIQArwAZAGZAkYCGABzAAoCaAIAAZMBagBhAGQAZAAoAz0CEgIFAuEAZgNKAGkAcwBEAz8BdAM/Ab8AIgAvACIBvwN7AGgCEQITAx8BrQLXAZAAaQL2A18CIwGtAp8AIAM4AzoCywM9Az8AcwAoA38ALgBsA4EC/AKNAb4ALgOIA4oALgOMA1wCqQGtAXsDdwN5A4wDhwOJAb8AdgNdAZoAZgOUA0IChgO7A5UAIAMOAxABrQMvAxgCCAO/A70CNgAgAc8DHgMFAYQCwQGEA2EDYwNNA2YAKAJCA84BdwPQAXcD0gNkA04CtQIKA60D2ABhA9oAYQOLAXYAaAPiA+QD3APUA08AMgO5Ay8C8AFwAuEDjAAgAxsAIAM0AWsDjwLWAosBkAO+A0oBSQHeA4UDqAOqA+YCEgGPACIAcgAiA7kDkgHTAn0AbAJtAm8BZQJyAaoAZgAuAX0DdwBBAGwAbAGrA7kCYAPjAn0EHgPrA2UDTwPXAa0EHgPqAC4DTAQjA98AIwPhBCYDzwQgA9EDrAPnAqoEMAG5BDIEKgPeArYBzAQ1A9kEMQPbBCkDYgPdA9UDUQBoA1MDVQK2Al8AIANZADYANQA1ADMCEAQdBDYEIQRBA9MEKwK2BEUERwBvA1YESgNZApUCEAAgAC0AIARZA1QEWwRJAdMETAROBFABlwAqA2oEUgQ+BDcEQAQ5A9UESgNpBF8EbwQfBHED5QAuA20DmAKyAZwBcAGrA2wDcgHfArUBhwKGAHsBvwAuAokC4QAjBIYDMgIOADID+QIUAHAD0wL8ACIAVQBzAQYAZQA6ACADPQEEBJsCDQOnAGUBZgGvAHkAPgINAG8AdQB0AHAEqwOTAvYEqABbAo0AcwBwAGwAYQEMAG4AYQEaAF0ECgIVAeMAIAIbA6cChgSPAFsCZQAKAuEDpwJKAYoBtQMPAZcD9gOqBJMDkAKZAQkCfQQEA1MDSgEHAHQDgwK2AHMCEwQaAC4E2QBSAWQAbgNkARQBFgEYBBwDtQOrA6cEhANtA8gEwwByAYcAWwAyAF0ExwPHA7wEygAoBMwBzAP1BNUDiQTRAp4DvAMzA7YE1wTgAX4E2wJ0BN4AbAUGAHQE4gBuBOQCsATmARcEugTpA6kFBAPIBO0BYgNKAT4C9gGpA6EDvAF5BLkBGgTwBPIAMwK5AdkDogTZAE4EugGqA6cBeQLhAUgChQOiA4EFCAUuBNEEngSWACgAIgTbBKQBbAByAQwE6wOGA6kCKgNCAG4AJwKFAGUAeAOlBL0DbwFqBMEENgM0AAoDsgU6BAoACgSVBOcEugMzAQABDgBlAXYBEgAgAHcAaQISACABAgSgAQcBCQELAQ0BDwERARMBFQUTARkBCABcAG4BowEhASMBJQEnASkBKwEtAS8BMQEzATUBNwE5ATsBPQE/AUEBQwFFAUcBSQFLAU0BTwFRAVMBVQFXAVkBWwFdAV8B1wJpA3UBkAEVAG0BbgFwAXIBgwF3AtQENgQ5AYcCSwQeAlYAWwBeAYwALgBiAesAPQBdAlkB3AS+AkcCCQQeAfECSwGMAf4FlgICAgQCygIIAZUCfAJ9AloDjgIUBU0CGQTAAjoDkgByACwAZgMcACwBwQA6A7sB0gIEAbcBlwOZAbEANgG0AbYBuAG6AbwDqAOhAcMBxQAtAGYF3wHKBdMBzgI5AdMB1QHXAdkB7AWwAegFsQIYAeUFxgHpBbUB8wH3AfYB/AH7AfkF+AX7Af0BjwW5AZQBlgW8AgkCCwT9ACAAOAXCAeQCFgIYAaQF8gMwAaACIQHPBdUAPQG1ADgCKgIgAD0CLQIvAjEAaQIzAjUCNwHXAdEB0wHJADgCPgGXAdkCQgYNBcQEcwNPAGMCQwHpBi4B/wGSAgICbAJuAT4CcQJzAHMBlwOSAnUEiAAgAH0BrgGwBhMALAAjAHMALwAyAbQGFgMhAyMC+QEIAvwCdQGPAHMBpwB5BR4CwARtBJIEYgT8BlYBWgPBAswGUgZUACAGVgOuBe4EDAKaAsMCkwJ9BF8GDgMqBIgGPwXVAqEDAQKlAsQCqAXbAwYAaQK5A0kEQgPsA98CPwZjA/wDEgYrA98CdQTFAmYGagMoApsFYAZAAsoClAGPBkQDYgYWA5IAawKGBoIGdgZqAd4DYgEMBcAB1wTIAwIAawLnA48FxgaXAsEGnAK5A/EAZQLhBpEDygLCAqYAZQU3BpYFPwLaACAC3AB3BPkBtQT8BqUF7wFqBOQBoAXuBoYChga9AtwGrgEMAwYGqgLEBncGiAbAAG4Glwa0AbQC1AZlBqsGogZxApMDwgaIAn0GwQYpBgoGCQNDBg0EDQHUA6sBbAWbAXEBcwQeAlIAIgHXBCcCfQBmBZkG4AWdAekFOAKvAvwAJwBXAhMBfQYWAHkEqgVgAdEChQFsBMAAeANiAQMChQOrBSIC9wOpAf0GzQTUAhUDdwGrBgIEyQIxBrUEzgXAAWAFNwTCBxAFqQUpBQcDhATdAvAFCwThBOME5QVuBOgDXAHrAWABvwTCBe4DogUcAX4FLQM/BjoD/AMLAw8GagP0BpkFYAFCAvYGigA8An0CXwPPBdsDkgLZBD8BhQGoAaoCPwLhBz0CfQPMBp8HLgMNBy8DkgGgBz4GXgdBAZcHMQTTByIFqQW0BhsGXATMB0kAbAGXB0gGXAGgBtMGpQdDBb8HLwMeBooDDAZcADMGagdMBHoHTgHKBGECOwRsAg8EagIpAw4FtAdAB20GWAdwBmkHdAGEB2wCPwOSAggG6AP/AHAEAQOMAlYAdwWwBBUAdwNjBR4EDwY1BKQEEwWeAYUHVgPCAY8HWQNcBdQEfwBvBIEHWwK6B10HVwTAAvEGpgIIB0QCOwU3A6ICzwBrAGUFCAOtB2UGigdfAjoF7gSVBu8BiwBFBv0BDwBjBV8G+wdUBUIFtwApAzUHfwP+AC4EAAIDA8gEBwB3BVUHiQeLAaoFVwVvAXkEFQBjBIABqgAp' data = frombase64(d) print('Where do you want to extract Packager?') dir = read() if dir:sub(1,1) ~= '/' then dir = '/'..fs.getDir(shell.getRunningProgram())..'/'..dir end fs.delete(dir) local i = 1 local path = '' while i <= #data do local c = data:byte(i) if c == 0 then i = i + 1 local l = data:byte(i) path = dir..'/'..data:sub(i + 1, i + l) i = i + l + 1 elseif c == 1 then i = i + 3 local l = data:byte(i - 2) * 65536 + data:byte(i - 1) * 256 + data:byte(i) local f = fs.open(path, 'w') f.write(lzw_decode(data:sub(i + 1, i + l))) f.close() i = i + l + 1 elseif c == 2 then fs.makeDir(path) i = i + 1 end end print('Extraced to '..dir..'.')
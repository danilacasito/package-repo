--Created with Packager by CrazedProgrammer
b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' function frombase64(data) data = string.gsub(data, '[^'..b..'=]', '') return (data:gsub('.', function(x) if (x == '=') then return '' end local r,f='',(b:find(x)-1) for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end return r; end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x) if (#x ~= 8) then return '' end local c=0 for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end return string.char(c) end)) end function lzw_decode(s) local str = { } for i=1,#s/2,1 do table.insert(str, s:byte(i * 2 - 1) * 256 + s:byte(i * 2)) end local dict_size = 256 local dict = {} for i = 0, dict_size-1 do dict[i] = string.char(i) end local w = string.char(str[1]) local result = w for i = 2, #str do local k = str[i] local entry = '' if dict[k] then entry = dict[k] elseif k == dict_size then entry = w .. w:sub(1,1) else return nil end result = result .. entry dict[dict_size] = w .. entry:sub(1,1) dict_size = dict_size + 1 w = entry end return result end d = 'AAkvcGFja2FnZXIBAA2oAC0ALQBQAGEAYwBrAGEAZwBlAHIAIABiAHkAIABDAHIAYQB6AGUAZABQAHIAbwBnAQ8AbQBtAQgACgAKAGIAPQAnAEEAQgBDAEQARQBGAEcASABJAEoASwBMAE0ATgBPAFAAUQBSAFMAVABVAFYAVwBYAFkAWgBhAGIAYwBkAGUAZgBnAGgAaQBqAGsAbABtAG4AbwBwAHEAcgBzAHQAdQB2AHcAeAB5AHoAMAAxADIAMwA0ADUANgA3ADgAOQArAC8AJwAKAGYAdQBuAGMAdABpAG8AbgAgAHQAbwBiAGEAcwBlADYANAAoAGQAYQB0AGEAKQAKACAAIAByAGUBTgByAWoAKAF0AXYAYQA6AGcAcwB1AGIAKAAnAC4AJwAsACABYwFlAWcBaQAoAHgAKQAgAXoBewAgAGwAbwBjAGEAbAF8ACwBHgAnAY4AeAA6AQsAdABlACgBeQGaAZAAbwEJAGkAPQA4ACwAMQAsAC0AMQAgAGQAbwF8AD0AcgAuAC4AKABiACUAMgBeAGkALQHCAcQAKAHGADEAKQA+ADAAIABhAG4AZAAgACcAMQAnACABrwHUADAAJwGXAGUB0gGZAXsBfQF/AWoAcgA7AZkB3gBkACkBvwAnADAB7QHbACkBhgGIAYoAJwAlAGQB9QH1AD8B+AH6AGQAPwGOAZABZAFmAWgAbgGVAawBmgBpAGYAIAAoACMAeAAgADwAIAA2AZcAdABoAd4BfAF+AHUBgAHUAdcB6AHgAZsBnQGfACAAYwA9ADACHABmAdkBsQG1ADYBuQG7AiEAYwArAZUAOgHyAcoALABpACkAPQEfAdYB0AHSACAByQA2AC0CNAHYAQkAMAHdAd8BrQHiAhcBagBiAjABiQAoAi0BtQJNAgUB6AHqAcAAewIZAY8AJwI2Af4CVwHXAH0AKQBbACMBdQF3ACUAMwArADEAXQF5AhsBkQIBAWkBmwB6AHcAXwHeAGMAbwE+ACgBTQByAgUBnAGeAaAAdwAgAD0CGQGZAngCHwF9AYgAbAB0AnwAIAB7AH0CfwIeAaAAZABpAWYAXwBzAGkBEQKGADIBWgKKAnkBuQKOAoUCfQKIAZkCJQGwAoYAMAGPAo0CjwKRAREBtwIqAhwCpAB0AFsCdQBpAG4AZwAuAGMAaABhAHIBygApAF0ChgBpAecCRAIdApgAaQKGAqsCkAKSAGUCngHZArMCtQAgAq8AIAJ1AYYAbQF2ArMBiwGNAZcBugIcAoACegBjAoYCewG/AiACtAByAhwCBwKZAWYAWwB3AGMCuQISAd4CHAF7AnsCfQLlAhwAZQBsAXAC6gFrATsAbABlAC4CrwFwAHIAdAAoAoIAdQKEAqMCmgLkAmYC8wKrAuQC5gK6AvMCwAJ9AsAAKwAgADEC8wLsAt0CtQLvAr0CGwF7AuEAdwB+AR8B1wLoAG4CHAF3AGIC9gL4AG4C+gL8Av4DAALiAqwAdwMEAXsDFwK+Ah8AcwKGACIAIgLGAQkAawAsAHYCygFqAHAAYQBpAUwC/QBlAoMAdALUAG8CHAMyAn0AcwG/Aq4CsAKyAt4AKALPAhIALgBmAZwBrwAoAzoALwI7AVoAKQIFAXsDSALMA0sAdAByAq8CsQLIArYDOgAlA1oCEAK8AGQBmQJGAhgAcwAKAmgCAAGTAWoAYQBkAGQAKAM9AhICBQLhAGYDSgBpAHMARAM/AXQDPwG/ACIALwAiAb8DewBoAhECEwMfAa0C1wGQAGkC9gNfAiMBrQKfACADOAM6AssDPQM/AHMAKAN/AC4AbAOBAvwCjQG+AC4DiAOKAC4DjANcAqkBrQF7A3cDeQOMA4cDiQG/AHYDXQGaAGYDlANCAoYDuwOVACADDgMQAa0DLwMYAggDvwO9AjYAIAHPAx4DBQGEAsEBhANhA2MDTQNmACgCQgPOAXcD0AF3A9IDZANOArUCCgOtA9gAYQPaAGEDiwF2AGgD4gPkA9wD1ANPADIDuQMvAvABcALhA4wAIAMbACADNAFrA48C1gKLAZADvgNKAUkB3gOFA6gDqgPmAhIBjwAiAHIAIgO5A5IB0wJ9AGwCbQJvAWUCcgGqAGYALgF9A3cAQQBsAGwBqwO5AmAD4wJ9BB4D6wNlA08D1wGtBB4D6gAuA0wEIwPfACMD4QQmA88EIAPRA6wD5wKqBDABuQQyBCoD3gK2AcwENQPZBDED2wQpA2ID3QPVA1EAaANTA1UCtgJfACADWQA2ADUANQAzAhAEHQQ2BCEEQQPTBCsCtgRFBEcAbwNWBEoDWQKVAhAAIAAtACAEWQNUBFsESQHTBEwETgRQAZcAKgNqBFIEPgQ3BEAEOQPVBEoDaQRfBG8EHwRxA+UALgNtA5gCsgGcAXABqwNsA3IB3wK1AYcChgB7Ab8ALgKJAuEAIwSGAzICDgAyA/kCFABwA9MC/AAiAFUAcwEGAGUAOgAgAz0BBASbAg0DpwBlAWYBrwB5AD4CDQBvAHUAdABwBKsDkwL2BKgAWwKNAHMAcABsAGEBDABuAGEBGgBdBAoCFQHjACACGwOnAoYEjwBbAmUACgLhA6cCSgGKAbUDDwGXA/YDqgSTA5ACmQEJAn0EBANTA0oBBwB0A4MCtgBzAhMEGgAuBNkAUgFkAG4DZAEUARYBGAQcA7UDqwOnBIQDbQPIBMMAcgGHAFsAMgBdBMcDxwO8BMoAKATMAcwD9QTVA4kE0QKeA7wDMwO2BNcE4AF+BNsCdATeAGwFBgB0BOIAbgTkArAE5gEXBLoE6QOpBQQDyATtAWIDSgE+AvYBqQOhA7wBeQS5ARoE8ATyADMCuQHZA6IE2QBOBLoBqgOnAXkC4QFIAoUDogOBBQgFLgTRBJ4ElgAoACIE2wSkAWwAcgEMBOsDhgOpAioDQgBuACcChQBlAHgDpQS9A28BagTBBDYDNAAKA7IFOgQKAAoElQTnBLoDMwEAAQ4AZQF2ARIAIAB3AGkCEgAgAQIEoAEHAQkBCwENAQ8BEQETARUFEwEZAQgAXABuAaMBIQEjASUBJwEpASsBLQEvATEBMwE1ATcBOQE7AT0BPwFBAUMBRQFHAUkBSwFNAU8BUQFTAVUBVwFZAVsBXQFfAdcCaQN1AZABFQBtAW4BcAFyAYMBdwLUBDYEOQGHAksEHgJWAFsAXgGMAC4AYgHrAD0AXQJZAdwEvgJHAgkEHgHxAksBjAH+BZYCAgIEAsoCCAGVAnwCfQJaA44CFAVNAhkEwAI6A5IAcgAsAGYDHAAsAcEAOgO7AdICBAG3AZcDmQGxADYBtAG2AbgBugG8A6gDoQHDAcUALQBmBd8BygXTAc4COQHTAdUB1wHZAewFsAHoBbECGAHlBcYB6QW1AfMB9wH2AfwB+wH5BfgF+wH9AY8FuQGUAZYFvAIJAgsE/QAgADgFwgHkAhYCGAGkBfIDMAGgAiEBzwXVAD0BtQA4AioCIAA9Ai0CLwIxAGkCMwI1AjcB1wHRAdMByQA4Aj4BlwHZAkIGDQXEBHMDTwBjAkMB6QYuAf8BkgICAmwCbgE+AnECcwBzAZcDkgJ1BIgAIAB9Aa4BsAYTACwAIwBzAC8AMgG0BhYDIQMjAvkBCAL8AnUBjwBzAacAeQUeAsAEbQSSBGIE/AZWAVoDwQLMBlIGVAAgBlYDrgXuBAwCmgLDApMCfQRfBg4DKgSIBj8F1QKhAwECpQLEAqgF2wMGAGkCuQNJBEID7APfAj8GYwP8AxIGKwPfAnUExQJmBmoDKAKbBWAGQALKApQBjwZEA2IGFgOSAGsChgaCBnYGagHeA2IBDAXAAdcEyAMCAGsC5wOPBcYGlwLBBpwCuQPxAGUC4QaRA8oCwgKmAGUFNwaWBT8C2gAgAtwAdwT5AbUE/AalBe8BagTkAaAF7gaGAoYGvQLcBq4BDAMGBqoCxAZ3BogGwABuBpcGtAG0AtQGZQarBqIGcQKTA8IGiAJ9BsEGKQYKBgkDQwYNBA0B1AOrAWwFmwFxAXMEHgJSACIB1wQnAn0AZgWZBuAFnQHpBTgCrwL8ACcAVwITAX0GFgB5BKoFYAHRAoUBbATAAHgDYgEDAoUDqwUiAvcDqQH9Bs0E1AIVA3cBqwYCBMkCMQa1BM4FwAFgBTcEwgcQBakFKQUHA4QE3QLwBQsE4QTjBOUFbgToA1wB6wFgAb8EwgXuA6IFHAF+BS0DPwY6A/wDCwMPBmoD9AaZBWABQgL2BooAPAJ9Al8DzwXbA5IC2QQ/AYUBqAGqAj8C4Qc9An0DzAafBy4DDQcvA5IBoAc+Bl4HQQGXBzEE0wciBakFtAYbBlwEzAdJAGwBlwdIBlwBoAbTBqUHQwW/By8DHgaKAwwGXAAzBmoHTAR6B04BygRhAjsEbAIPBGoCKQMOBbQHQAdtBlgHcAZpB3QBhAdsAj8DkgIIBugD/wBwBAEDjAJWAHcFsAQVAHcDYwUeBA8GNQSkBBMFngGFB1YDwgGPB1kDXAXUBH8AbwSBB1sCugddB1cEwALxBqYCCAdEAjsFNwOiAs8AawBlBQgDrQdlBooHXwI6Be4ElQbvAYsARQb9AQ8AYwVfBvsHVAVCBbcAKQM1B38D/gAuBAACAwPIBAcAdwVVB4kHiwGqBVcFbwF5BBUAYwSAAaoAKQ==' data = frombase64(d) print('Where do you want to extract bin?') dir = read() if dir:sub(1,1) ~= '/' then dir = '/'..fs.getDir(shell.getRunningProgram())..'/'..dir end fs.delete(dir) local i = 1 local path = '' while i <= #data do local c = data:byte(i) if c == 0 then i = i + 1 local l = data:byte(i) path = dir..'/'..data:sub(i + 1, i + l) i = i + l + 1 elseif c == 1 then i = i + 3 local l = data:byte(i - 2) * 65536 + data:byte(i - 1) * 256 + data:byte(i) local f = fs.open(path, 'w') f.write(lzw_decode(data:sub(i + 1, i + l))) f.close() i = i + l + 1 elseif c == 2 then fs.makeDir(path) i = i + 1 end end print('Extraced to '..dir..'.')